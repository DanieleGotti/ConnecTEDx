db.js --> 

const mongoose = require('mongoose');
mongoose.Promise = global.Promise;
let isConnected;

require('dotenv').config({ path: './variables.env' });

module.exports = connect_to_db = () => {
    if (isConnected) {
        console.log('=> using existing database connection');
        return Promise.resolve();
    }

    console.log('=> using new database connection');
    return mongoose.connect(process.env.DB, { dbName: 'unibg_tedx_2024', useNewUrlParser: true, useUnifiedTopology: true }).then(db => {
        isConnected = db.connections[0].readyState;
    });
};

Handler.js --> 

const connect_to_db = require('./db');
const Person = require('./Person');

require('dotenv').config({ path: './variables.env' });

module.exports.get_top_tags = async (event, context, callback) => {
    context.callbackWaitsForEmptyEventLoop = false;
    console.log('Received event:', JSON.stringify(event, null, 2));

    let body = {};
    if (event.body) {
        body = JSON.parse(event.body);
    }

    const { id } = body;

    if (!id) {
        callback(null, {
            statusCode: 500,
            headers: { 'Content-Type': 'text/plain' },
            body: 'ID is required.'
        });
        return;
    }

    try {
        await connect_to_db();
        const person = await Person.findById(id);

        if (!person) {
            callback(null, {
                statusCode: 404,
                headers: { 'Content-Type': 'text/plain' },
                body: 'Person not found.'
            });
            return;
        }
        const totalTagViews = person.tags_viewed.reduce((acc, tag) => acc + tag.tag_count, 0);
        const sortedTags = person.tags_viewed.sort((a, b) => b.tag_count - a.tag_count);
        const topTags = sortedTags.slice(0, 3).map(tag => ({
            tag: tag.tag,
            percentage: ((tag.tag_count / totalTagViews) * 100).toFixed(2) + '%'
        }));

        callback(null, {
            statusCode: 200,
            body: JSON.stringify(topTags)
        });

    } catch (err) {
        console.error('Error:', err);
        callback(null, {
            statusCode: 500,
            headers: { 'Content-Type': 'text/plain' },
            body: 'Could not fetch top tags.'
        });
    }
};

Person.js --> 

const mongoose = require('mongoose');

const person_schema = new mongoose.Schema({
    _id: String,
    tags_viewed: [{
        tag: String,
        tag_count: Number
    }]
}, { collection: 'user_data' });

module.exports = mongoose.model('user_data', person_schema);

